{
  "compilerOptions": {
    "target": "esnext", //指定ECMAScript目标版本
    "module": "esnext", //指定生成哪个模块的代码
    "moduleResolution": "node", //决定如何处理模块
    "strict": true, //启用所有严格类型检查选项
    "forceConsistentCasingInFileNames": true, //禁止对同一个文件的不一致的引用
    "allowSyntheticDefaultImports": true, //允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查
    "strictFunctionTypes": false, //禁用函数参数双向协变检查
    "jsx": "preserve", //在 .tsx文件里支持JSX： "React"或 "Preserve"
    "baseUrl": ".", //解析非相对模块名的基准目录
    "allowJs": true, //允许编译javascript文件
    "sourceMap": true, //生成相应的 .map文件
    "esModuleInterop": true, //支持使用import的方式引入commonjs包
    "resolveJsonModule": true, //解析JSON Module
    "noUnusedLocals": true, //若有未使用的局部变量则抛错
    "noUnusedParameters": true, //若有未使用的参数则抛错
    "experimentalDecorators": true, //启用实验性的ES装饰器
    "lib": ["dom", "esnext", "ES2015"], //编译过程中需要引入的库文件的列表
    "types": ["vite/client"], //要包含的类型声明文件名列表
    "typeRoots": ["./node_modules/@types/", "./types"], //要包含的类型声明文件路径列表
    "noImplicitAny": false, //在表达式和声明上有隐含的 any类型时报错
    "skipLibCheck": true, //忽略所有的声明文件（ *.d.ts）的类型检查
    //模块名到基于 baseUrl的路径映射的列表
    "paths": {
      "/@/*": ["src/*"],
      "/#/*": ["types/*"]
    }
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/**/*.d.ts",
    "types/**/*.ts",
    "build/**/*.d.ts",
    "build/**/*.ts",
    "mock/**/*/ts",
    "vite.config.ts"
  ],
  "exclude": ["node_modules", "dist", "**/*.js"]
}